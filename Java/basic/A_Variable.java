package practice+;

public class A_Variable {

	public static void main(String[] args) {
		
		// 변수(Variable)
		// : 메모리에 값을 저장하기 위해 할당해 놓은 공간 / 지정한 타입의 데이터만 할당 할 수 있다
		
		// 선언: 변수를 생성 > 데이터타입 변수명;
		int number;
		// 초기화: 변수에 초기 값을 할당하는 것 > 변수명 = 데이터;
		// 변수를 선언한 후 초기화 하지않으면 사용할 수 없다
		number = 10;
		
		// 선언과 동시에 초기화 > 데이터타입 변수명 = 데이터;
		double num = 2.18;
		
		// 지정한 타입의 데이터가 아니면 할당할 수 없다
		// number = 3.14;
		
		//-----------------------------------------------------
		// -- 변수 명명 규칙 --
		// ▶ 1. 중복된 이름 X
			int a = 0;
		//	double a = 0.0;
		
		// ▶ 2. 숫자로 시작 X
		//	int 1age;  
			
		// ▶ 3. 연산자로 사용되는 특수문자 포함 X
		//	boolean +a;
			
		// ▶ 4. 키워드 단어만으로는 사용 X
		//	int int;
		
		//-----------------------------------------------------
		// -- 암묵적인 룰 --
		// ▶ 띄어쓰기 표현
		// - Camel Case: 단어 조합 시 띄어쓰기를 하는 대신 두번째 글자부터 첫글자를 대문자로 표현
		//	String galexyTab;
		// - Snake Case: 띄어쓰기 자리를 _로 대체
		//	String galexy_tab
			
		// - UpperCamelCase: 첫 문자를 대문자로 시작 (클래스, 인터페이스)
		// - lowerCamelCase: 첫 글자를 소문자로 시작 (변수, 메서드)
		// - UPPER_SNAKE_CASE: 모든 문자를 대문자로 작성 (상수)
		// - lower_snake_case: 모든 문자를 소문자로 작성 (변수, 메서드)
			
		//-----------------------------------------------------	
		// 상수 (Constant)
		// : 초기화가 이루어지면 그 값을 변경할 수 없는 변수
		// : 변수 앞에 final 키워드를 붙여 선언
		final int max = 10;
		// max = 20; > 오류, 재할당 불가
			
		// 상수를 사용하는 이유: '리터럴'에 이름을 붙혀주기 위한 용도로 가장 많이 사용
		// 리터럴 = 값 그 자체
		// double 3.14; > 3.14가 리터럴 
			
		
	}

}
