package practice2;

// 프로그래밍 객체: 실제 객체 중에서 프로그래밍화 할 가치가 있거나 가능한 것
	
// 클래스: 객체를 생성하기 위한 제작 설명서 같은것, 공통된 속성과 기능을 하나로 정의해둔 것	
// [접근제어자] class 클래스명 {속성, 기능}
// 클래스를 선언할때는 클래스 외부에서 선언하여야 한다

class Example01 {
	// 속성: 클래스가 가질 수 있는 정보나 상태
	// 일반적으로 변수로 표현한다
	
	//----------------------------------------------------------------------------------------------
	// ## ▶ 인스턴스 변수
	// 각 인스턴스마다 독립적으로 값을 가지는 변수
	// 반드시 인스턴스가 생성된 후 인스턴스로 사용 가능
	int attribute;
	
	// ## ▶ 클래스 변수 (= 스테틱 변수, 정적 변수) 
	// 해당 클래스로 생성된 모든 인스턴스가 공유하는 변수
	// 속성 앞에 static 키워드를 사용하여 지정 가능
	// 클래스로 직접 사용할 수 있고 인스턴스에서도 사용할 수 있다
	static int staticAttribute;
	
	//----------------------------------------------------------------------------------------------
	// ## ▶ 기능(메서드): 클래스가 가질 수 있는 행동이나 작업
	// 클래스로 생성된 객체를 통해서 호출 가능
	// [접근제어자, 일반제어자] 반환타입 메서드명 (매개변수타입 매개변수명, ...) {메소드 기능} 
	
	// # 인스턴스 메서드: 인스턴스가 생성된 후에 사용가능 / 일반적으로 인스턴스 변수를 사용하는 기능을 구현할때 사용
	void methodExample1 () {return;}					  // 매개변수X 반환값X
	int methodExample2 () {return 0;}					  // 매개변수O 반환값O
	void methodExample3 (int arg1, int arg2) {return;}	  // 매개변수X 반환값O
	int methodExample4 (int arg1, int arg2) {return 0;}	  // 매개변수O 반환값X
	
	// # 클래스 메서드: 같은 클래스로 생성된 인스턴스가 공유하는 기능 / 인스턴스 변수 사용 불가
	static void staticMethod1 () {
		// static 메서드에서는 인스턴스 변수 접근 및 인스턴스 메서드 호출 불가능
		// System.out.println(attribute); 				  // 인스턴스 변수 접근 불가능
		System.out.println(staticAttribute);			  // 스태틱 변수 접근 가능
		
		// System.out.println(methodExample1);				  // 인스턴스 메소드 호출 불가능
	}
	
	// ## ▶ setter/getter
	// : 입력/출력을 제어하기 위한 메서드
	// : 메서드에서 필드에 들어갈 값을 검증한 후 필드에 대입 가능
	// set변수명, get변수명
	// private 로 접근이 제한된 변수와 같이 사용
	
	//----------------------------------------------------------------------------------------------
	// ## ▶ 생성자: 클래스의 인스턴스를 생성하는 순간에 호출되는 메서드
	// 생성시에 실행할 코드를 구현한 메서드, 일반적으로 인스턴수 변수 초기화 작업에 이용
	// 개발자가 생성자를 직접 작성하지 않으면 자바에서 기본 생성자를 자동으로 생성
	// 클래스와 같은 이름을 가지고 있고, 반환타입이 존재 X
	Example01 (int attribute1, double arg1) {
		System.out.println("Example01 인스턴스 생성");
	}
	
	//----------------------------------------------------------------------------------------------	
	// ## ▶ 오버로딩(Overloading): 같은 클래스 내에서 같은 이름의 메서드를 작성할 수 있는 방법
	// 조건
	// 1. 메서드 이름은 같게, 매개변수의 타입 및 개수는 다르게
	// 2. 메서드의 반환타입, 매개변수 이름은 오버로딩에 영향 X

	void overloadMethod () {}
	
	void overloadMethod (int arg) {}						 
	void overloadMethod (char chr) {}						 // 변수 타입 다르게 O
	void overloadMethod (int arg, char chr) {}				 // 변수 개수 여러개 O
	
	// int overloadMethod () {return 0;}					 // 반환타입은 영향이 없어 바꾼경우 인정X

	Example01 () {};										 // 생성자도 메서드의 일종이므로 오버로딩 가능
	
}
	
public class A_ClassAndObject {

	public static void main(String[] args) {
		
		Example01 instance1 = new Example01(0, 0);
		Example01 instance2 = new Example01(10, 9.9);
		// Example01 클래스의 인스턴스를 생성한 순간에 생성자의 기능이 실행되는 것을 확인 할 수 있다
		
	}

}
