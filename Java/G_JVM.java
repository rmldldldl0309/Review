package practice2;

// JVM (Java Virtual Machine): 코드를 실행하고, 해당 코드에 대해 런타임 환경을 제공

// 런타임 데이터 영역:
// 메서드 영역, 힢 영역, 쓰레드(스택영역, PC 레지스터, Native 메서드 스택)

// 메서드 영역: 
// 각각의 클래스 구조(필드와 메서드정보, 타입정보, 상수풀, 파이널 클래스)를 저장 / 모든 스레드가 공유하는 영역
// 클래스나 인터페이스의 구조 정보, 정적데이터가 저장되는 메모리 공간 

// 힢 영역:
// 모든 클래스 인스턴스와 배열을 저장(new 연산자를 통해 생성된 객체) / 모든 스레드가 공유하는 영역
// 주기적으로 GC(가비지 컬렉션)이 제거하는 영역

// 스택영역:
// 지역변수, 파라미터, 리턴 값, 연산에 사용되는 영역
// 각 스레드별로 Java 스택을 생성, 메서드 호출과 지역변수에대한 정보가 저장
// 각 메서드 호출마다 하나의 스택 프레임이 생성되고 정보를 저장하고 호출이 종료되면 해당 스택 프레임 제거

class Class{
	// 클래스 변수의 데이터 - 메서드 영역에 저장
	static int staticVariable;
	// 인스턴스 변수의 데이터 - 메서드 영역에 저장
	int instanceVariable;
	// 클래스 메서드의 구현 데이터 - 메서드 영역에 저장
	static void staticMethod() {}
	// 인스턴스 메서드의 구조 정보만 메서드 영역에 저장
	void instanceMethod() {}	
}

public class A_JVM {

	// 메인 메서드 실행되면 필요한 데이터는 스택 영역에 저장
	public static void main(String[] args) {
		// 지역 변수의 데이터 - 스택영역에 저장
		int num = 0;
		
		// 지역 참조변수 - 스택영역에 저장	(주소)
		// 실제 인스턴스는 힙영역에 저장	(값)
		Class instance = new Class();
		
		// 호출한 메서드가 실행되면 필요한 데이터는 스택영역에 저장 > 호출한 메서드 종료 시 스택영역에서 자동 제거
		instance.instanceMethod();
	}
}